{"version":3,"sources":["serviceWorker.js","useStorage.js","Menu.js","ItemsList.js","index.js"],"names":["Boolean","window","location","hostname","match","isFunction","value","Object","prototype","toString","call","Function","getSavedTextFromLocalStorage","localStorage","getItem","getSavedCompletedItemsFromLocalStorage","JSON","parse","savedText","savedCompletedItems","StorageContext","React","createContext","onSave","text","setText","completedItems","setCompletedItems","isSaved","setIsSaved","reloadFromDatabase","undo","canUndo","StorageProvider","children","useState","destinationFile","setDestinationFile","data","setData","pastDataStates","useRef","lastSave","current","length","push","useCallback","updateText","pop","a","setItem","stringify","handle","chooseFileSystemEntries","type","createWritable","writer","write","close","firstRender","useEffect","functionOrObject","Provider","useStorage","useContext","Menu","onShowCompletedItems","showCompletedItems","onClick","v","ItemsList","items","onCheckboxCheck","checked","render","props","map","item","index","key","onChange","initialPageTitle","document","title","App","setShowCompletedItems","textArea","textAreaNode","onKeyDownInTextArea","e","ctrlKey","metaKey","preventDefault","stopPropagation","addEventListener","removeEventListener","textToLineArray","split","rawLine","nonCompletedItems","filter","line","replace","ref","autoFocus","target","id","date","format","Date","_","i","join","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f213f1eb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\n\nconst isFunction = (value) =>\n  value &&\n  (Object.prototype.toString.call(value) === \"[object Function]\" ||\n    \"function\" === typeof value ||\n    value instanceof Function);\n\nconst LOCAL_STORAGE_TEXT_KEY = \"text\";\nconst LOCAL_STORAGE_COMPLETED_ITEMS = \"completed_items\";\n\nconst getSavedTextFromLocalStorage = () =>\n  window.localStorage.getItem(LOCAL_STORAGE_TEXT_KEY) ?? \"\";\nconst getSavedCompletedItemsFromLocalStorage = () =>\n  JSON.parse(\n    window.localStorage.getItem(LOCAL_STORAGE_COMPLETED_ITEMS) ?? \"[]\"\n  );\n\nconst savedText = getSavedTextFromLocalStorage();\nconst savedCompletedItems = getSavedCompletedItemsFromLocalStorage();\n\nconst StorageContext = React.createContext({\n  onSave: null,\n  text: null,\n  setText: null,\n  completedItems: null,\n  setCompletedItems: null,\n  isSaved: null,\n  setIsSaved: null,\n  reloadFromDatabase: null,\n  undo: null,\n  canUndo: null,\n});\n\nexport const StorageProvider = ({ children }) => {\n  const [destinationFile, setDestinationFile] = React.useState();\n  const [data, setData] = React.useState({\n    text: savedText,\n    completedItems: savedCompletedItems,\n  });\n  const { text, completedItems } = data;\n  const [isSaved, setIsSaved] = React.useState(true);\n\n  const pastDataStates = React.useRef([data]);\n\n  const lastSave = pastDataStates.current[pastDataStates.current.length - 1];\n  if (\n    lastSave.text !== data.text ||\n    lastSave.completedItems !== data.completedItems\n  ) {\n    pastDataStates.current.push(data);\n  }\n\n  const undo = React.useCallback(\n    ({ updateText = true } = { updateText: true }) => {\n      if (pastDataStates.current.length < 2) return;\n      pastDataStates.current.pop();\n      if (updateText)\n        setData(pastDataStates.current[pastDataStates.current.length - 1]);\n    },\n    []\n  );\n\n  const reloadFromDatabase = React.useCallback(\n    () =>\n      setData({\n        text: getSavedTextFromLocalStorage(),\n        completedItems: getSavedCompletedItemsFromLocalStorage(),\n      }),\n    []\n  );\n\n  const onSave = React.useCallback(async () => {\n    window.localStorage.setItem(LOCAL_STORAGE_TEXT_KEY, text);\n    window.localStorage.setItem(\n      LOCAL_STORAGE_COMPLETED_ITEMS,\n      JSON.stringify(completedItems)\n    );\n    setIsSaved(true);\n    let handle = destinationFile;\n    if (!handle) {\n      handle = await window.chooseFileSystemEntries({\n        type: \"save-file\",\n      });\n      setDestinationFile(handle);\n    }\n\n    const writer = await handle.createWritable();\n    await writer.write({\n      type: \"write\",\n      data: text,\n    });\n    await writer.close();\n  }, [text, completedItems, destinationFile]);\n\n  const firstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (firstRender.current) {\n      firstRender.current = false;\n      return;\n    }\n    setIsSaved(window.localStorage.getItem(LOCAL_STORAGE_TEXT_KEY) === text);\n  }, [text]);\n\n  const value = {\n    onSave,\n    text,\n    setText: (functionOrObject) =>\n      setData((data) => ({\n        ...data,\n        text: isFunction(functionOrObject)\n          ? functionOrObject(text)\n          : functionOrObject,\n      })),\n    completedItems,\n    setCompletedItems: (functionOrObject) =>\n      setData((data) => ({\n        ...data,\n        completedItems: isFunction(functionOrObject)\n          ? functionOrObject(data.completedItems)\n          : functionOrObject,\n      })),\n    isSaved,\n    setIsSaved,\n    reloadFromDatabase,\n    undo,\n    canUndo: pastDataStates.current.length > 1,\n  };\n\n  return (\n    <StorageContext.Provider value={value}>{children}</StorageContext.Provider>\n  );\n};\n\nconst useStorage = () => React.useContext(StorageContext);\nexport default useStorage;\n","import React from \"react\";\nimport useStorage from \"./useStorage\";\n\nconst Menu = ({ onShowCompletedItems, showCompletedItems }) => {\n  const { onSave, isSaved, reloadFromDatabase, undo, canUndo } = useStorage();\n  return (\n    <nav>\n      {canUndo && (\n        <>\n          <button onClick={undo}>Undo</button>{\" \"}\n        </>\n      )}\n      <button onClick={onSave}>Save (^S)</button>{\" \"}\n      {!isSaved ? \"(not saved)\" : \"\"}{\" \"}\n      <button onClick={() => onShowCompletedItems((v) => !v)}>\n        {!showCompletedItems ? \"Show completed items\" : \"Hide completed items\"}\n      </button>{\" \"}\n      {!isSaved && (\n        <button onClick={reloadFromDatabase}>Reload from local storage</button>\n      )}\n    </nav>\n  );\n};\n\nexport default Menu;\n","import React from \"react\";\n\nconst ItemsList = ({ items, onCheckboxCheck, checked, render, ...props }) => {\n  if (items.length === 0) return <div>Empty</div>;\n  return (\n    <ul {...props}>\n      {items.map((item, index) => (\n        <li key={item.index || index}>\n          <input\n            type=\"checkbox\"\n            checked={checked}\n            onChange={() => onCheckboxCheck(item, index)}\n          />{\" \"}\n          {render(item)}\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default ItemsList;\n","import React from \"react\";\nimport format from \"date-fns/format\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\nimport Menu from \"./Menu\";\nimport ItemsList from \"./ItemsList\";\nimport useStorage, { StorageProvider } from \"./useStorage\";\n\nconst initialPageTitle = window.document.title;\n\nconst App = () => {\n  const {\n    onSave,\n    isSaved,\n    text,\n    setText,\n    setCompletedItems,\n    completedItems,\n    undo,\n  } = useStorage();\n\n  const [showCompletedItems, setShowCompletedItems] = React.useState(false);\n\n  const textArea = React.useRef();\n\n  React.useEffect(() => {\n    const textAreaNode = textArea.current;\n    const onKeyDownInTextArea = async (e) => {\n      if ((e.ctrlKey === true || e.metaKey === true) && e.key === \"s\") {\n        e.preventDefault();\n        await onSave();\n      }\n      if ((e.ctrlKey === true || e.metaKey === true) && e.key === \"z\") {\n        e.stopPropagation();\n        undo({ updateText: false });\n      }\n    };\n    textAreaNode.addEventListener(\"keydown\", onKeyDownInTextArea);\n    return () =>\n      textAreaNode.removeEventListener(\"keydown\", onKeyDownInTextArea);\n  }, [onSave, undo]);\n\n  React.useEffect(() => {\n    if (isSaved) window.document.title = initialPageTitle;\n    else window.document.title = `* ${initialPageTitle}`;\n  }, [isSaved]);\n\n  const textToLineArray = text.split(\"\\n\").map((rawLine, index) => ({\n    rawLine,\n    index,\n  }));\n\n  const nonCompletedItems = textToLineArray\n    .filter(({ rawLine }) => rawLine.match(/^\\s*-/))\n    .map(({ rawLine, index }) => ({\n      rawLine,\n      index,\n      line: rawLine.replace(/^\\s*-\\s*/g, \"\"),\n    }))\n    .filter(({ line }) => line.length > 0);\n  return (\n    <div>\n      <Menu\n        onShowCompletedItems={() => setShowCompletedItems((v) => !v)}\n        showCompletedItems={showCompletedItems}\n      />\n      <textarea\n        ref={textArea}\n        autoFocus\n        value={text}\n        onChange={(e) => setText(e.target.value)}\n      ></textarea>\n      <ItemsList\n        render={({ line }) => line}\n        id=\"list\"\n        checked={false}\n        items={nonCompletedItems}\n        onCheckboxCheck={({ line, rawLine, index }) => {\n          setCompletedItems((completedItems) => [\n            ...completedItems,\n            {\n              rawLine,\n              line,\n              date: format(new Date(), \"yyyy-MM-dd HH:MM\"),\n            },\n          ]);\n          setText(\n            textToLineArray\n              .filter((_, i) => i !== index)\n              .map(({ rawLine }) => rawLine)\n              .join(\"\\n\")\n          );\n        }}\n      />\n      {showCompletedItems && (\n        <ItemsList\n          render={({ line, date }) => `${line} (on ${date})`}\n          id=\"completed\"\n          checked\n          items={completedItems}\n          onCheckboxCheck={({ rawLine }, index) => {\n            setCompletedItems((completedItems) =>\n              completedItems.filter((_, i) => i !== index)\n            );\n            setText((text) => `${rawLine}\\n${text}`);\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <StorageProvider>\n      <App />\n    </StorageProvider>\n  </React.StrictMode>,\n  window.document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}