{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","pageTitle","document","title","savedText","localStorage","getItem","savedCompletedItems","JSON","parse","App","React","useState","destinationFile","setDestinationFile","text","setText","completedItems","setCompletedItems","isSaved","setIsSaved","showCompletedItems","setShowCompletedItems","textArea","useRef","onSave","useCallback","a","setItem","stringify","handle","chooseFileSystemEntries","type","createWritable","writer","write","data","close","useEffect","textAreaNode","current","onCtrlS","e","ctrlKey","metaKey","key","preventDefault","addEventListener","removeEventListener","firstRender","allItems","split","map","rawItem","index","item","replace","onClick","v","ref","autoFocus","value","onChange","target","id","filter","length","checked","date","format","Date","_","i","join","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6d85f731.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport format from \"date-fns/format\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\n\nconst pageTitle = window.document.title;\n\nconst LOCAL_STORAGE_TEXT_KEY = \"text\";\nconst LOCAL_STORAGE_COMPLETED_ITEMS = \"completed_items\";\n\nconst savedText = window.localStorage.getItem(LOCAL_STORAGE_TEXT_KEY) ?? \"\";\nconst savedCompletedItems = JSON.parse(\n  window.localStorage.getItem(LOCAL_STORAGE_COMPLETED_ITEMS) ?? \"[]\"\n);\n\nconst App = () => {\n  const [destinationFile, setDestinationFile] = React.useState();\n\n  const [text, setText] = React.useState(savedText);\n  const [completedItems, setCompletedItems] = React.useState(\n    savedCompletedItems\n  );\n\n  const [isSaved, setIsSaved] = React.useState(true);\n  const [showCompletedItems, setShowCompletedItems] = React.useState(false);\n\n  const textArea = React.useRef();\n\n  const onSave = React.useCallback(async () => {\n    window.localStorage.setItem(LOCAL_STORAGE_TEXT_KEY, text);\n    window.localStorage.setItem(\n      LOCAL_STORAGE_COMPLETED_ITEMS,\n      JSON.stringify(completedItems)\n    );\n    setIsSaved(true);\n    let handle = destinationFile;\n    if (!handle) {\n      handle = await window.chooseFileSystemEntries({\n        type: \"save-file\",\n      });\n      setDestinationFile(handle);\n    }\n\n    const writer = await handle.createWritable();\n    await writer.write({\n      type: \"write\",\n      data: text,\n    });\n    await writer.close();\n  }, [text, completedItems, destinationFile]);\n\n  React.useEffect(() => {\n    const textAreaNode = textArea.current;\n    const onCtrlS = async (e) => {\n      if ((e.ctrlKey === true || e.metaKey === true) && e.key === \"s\") {\n        e.preventDefault();\n        await onSave();\n      }\n    };\n    textAreaNode.addEventListener(\"keydown\", onCtrlS);\n    return () => textAreaNode.removeEventListener(\"keydown\", onCtrlS);\n  }, [text, onSave]);\n\n  const firstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (firstRender.current) {\n      firstRender.current = false;\n      return;\n    }\n    setIsSaved(window.localStorage.getItem(LOCAL_STORAGE_TEXT_KEY) === text);\n  }, [text]);\n\n  React.useEffect(() => {\n    if (isSaved) window.document.title = pageTitle;\n    else window.document.title = `* ${pageTitle}`;\n  }, [isSaved]);\n\n  const allItems = text.split(\"-\").map((rawItem, index) => ({\n    rawItem,\n    item: rawItem.replace(/(^[\\n\\s]+)|([\\n\\s]+$)/g, \"\"),\n    index,\n  }));\n\n  return (\n    <div>\n      <nav>\n        <button onClick={onSave}>Save (^S)</button>{\" \"}\n        {!isSaved ? \"(not saved)\" : \"\"}{\" \"}\n        <button onClick={() => setShowCompletedItems((v) => !v)}>\n          {!showCompletedItems\n            ? \"Show completed items\"\n            : \"Hide completed items\"}\n        </button>\n      </nav>\n      <textarea\n        ref={textArea}\n        autoFocus\n        value={text}\n        onChange={(e) => setText(e.target.value)}\n      ></textarea>\n      <ul id=\"list\">\n        {allItems\n          .filter(({ item }) => item.length > 0)\n          .map(({ item, rawItem, index }) => (\n            <li>\n              <input\n                type=\"checkbox\"\n                checked={false}\n                onChange={(e) => {\n                  if (e.target.checked) {\n                    setCompletedItems((completedItems) => [\n                      ...completedItems,\n                      {\n                        rawItem,\n                        item,\n                        date: format(new Date(), \"yyyy-MM-dd HH:MM\"),\n                      },\n                    ]);\n                    setText(\n                      allItems\n                        .filter((_, i) => i !== index)\n                        .map(({ rawItem }) => rawItem)\n                        .join(\"-\")\n                    );\n                  }\n                }}\n              />{\" \"}\n              {item}\n            </li>\n          ))}\n      </ul>\n      {showCompletedItems && (\n        <ul id=\"completed\">\n          {completedItems.length === 0 && \"Empty\"}\n          {completedItems.map(({ rawItem, item, date }, index) => (\n            <li>\n              <input\n                type=\"checkbox\"\n                checked\n                onChange={(e) => {\n                  if (!e.target.checked) {\n                    setCompletedItems((completedItems) =>\n                      completedItems.filter((_, i) => i !== index)\n                    );\n                    setText(\n                      (text) => `${text.replace(/\\n$/, \"\")}\\n-${rawItem}`\n                    );\n                  }\n                }}\n              />{\" \"}\n              {rawItem} (on {date})\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  window.document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}